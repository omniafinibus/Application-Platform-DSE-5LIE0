import "Task.poosl"

process class Task3_8 extends Task

ports 
	In1_F2_T1, 
	In2_F8_T4, 
	Out1_F6_T7, 
	Out2_F13_T10

messages 
	Control!MappedTo(String), 
	
	In1_F2_T1!InspectTokenAvailability(Integer), 
	In1_F2_T1!MappedTo(String), 
	In1_F2_T1!ReleaseRoom(),
	In1_F2_T1?TokensAvailable(), 
	
	In2_F8_T4!InspectTokenAvailability(Integer), 
	In2_F8_T4!MappedTo(String), 
	In2_F8_T4!ReleaseRoom(),
	In2_F8_T4?TokensAvailable(),

	Out1_F6_T7!MappedTo(String), 
	Out1_F6_T7?ReservationSuccessful(), 
	Out1_F6_T7!ReserveRoom(Integer, Integer),
	Out1_F6_T7!WriteTokens(), 

	Out2_F13_T10!MappedTo(String),
	Out2_F13_T10?ReservationSuccessful(), 
	Out2_F13_T10!ReserveRoom(Integer, Integer),
	Out2_F13_T10!WriteTokens()

variables

init 
	Initialise()()

methods

	CheckTokenAvailabilityForReads(Scenario: String)()
		In1_F2_T1!InspectTokenAvailability(1);
		In1_F2_T1?TokensAvailable;

		if Scenario = "S2" then
			In2_F8_T4!InspectTokenAvailability(1);
			In2_F8_T4?TokensAvailable
		fi

	NotifyBuffersAboutMapping()()
		par
			In1_F2_T1!MappedTo(MapTo)
		and
			In2_F8_T4!MappedTo(MapTo)
		and
			Out1_F6_T7!MappedTo(MapTo)
		and
			Out2_F13_T10!MappedTo(MapTo)
		and
			Control!MappedTo(MapTo)
		rap

	PerformWrites()()
		Out1_F6_T7!WriteTokens;
		Out2_F13_T10!WriteTokens

	ReleaseSpaceForReads(Scenario: String)()
		In1_F2_T1!ReleaseRoom;
		
		if Scenario = "S2" then
			In2_F8_T4!ReleaseRoom
		fi

	ReserveSpaceForWrites(Scenario: String, Iteration: Integer)()

		Out1_F6_T7!ReserveRoom(1, Iteration);
		Out1_F6_T7?ReservationSuccessful;

		Out2_F13_T10!ReserveRoom(1, Iteration);
		Out2_F13_T10?ReservationSuccessful